#!/usr/bin/env python
import subprocess
import optparse
import re


def get_arguments():
    parser = optparse.OptionParser()

    parser.add_option("-i", "--interface", dest="interface", help="Interface to change its Wireless Mode")
    parser.add_option("-m", "--mode", dest="mode", help="Select Mode Managed/Monitor")

    (options, arguments) = parser.parse_args()
    if not options.mode:
        parser.error("[.] Please specify a new mode, use --help for more info")
    elif not options.interface:
        parser.error("[.] Please specify an interface, use --help for more info")
    return options


def wireless_mode(interface, mode):
    print("[+] Changing Wireless Mode for " + interface + " to " + mode)
    subprocess.call("ifconfig " + interface + " down", shell=True)
    subprocess.call("airmon-ng check kill", shell=True)
    # sleep(5)
    subprocess.call("iwconfig " + interface + " mode "+mode, shell=True)
    subprocess.call("ifconfig " + interface + " up", shell=True)
    # subprocess.call("systemctl start NetworkManager.service", shell=True)



def get_current_mode(interface):
    ifconfig_result = subprocess.check_output(["iwconfig", interface])
    mac_address_search_result = re.search(r"Mode:(\w+)", str(ifconfig_result))
    if mac_address_search_result:
        return mac_address_search_result.group(0)
    else:
        print("[-] Could not read the Wireless Mode")


options = get_arguments()
current_mode = get_current_mode(options.interface)
print("[+] Current " + str(current_mode))
wireless_mode(options.interface, options.mode)
changed_mode = get_current_mode(options.interface)
if changed_mode == "Mode:"+options.mode:
    print("[+] Wireless Mode Change Successful")
    print("[+] New Mode of " + options.interface + " is: " + str(changed_mode))
else:
    print("[-] Wireless Mode did not get changed")
